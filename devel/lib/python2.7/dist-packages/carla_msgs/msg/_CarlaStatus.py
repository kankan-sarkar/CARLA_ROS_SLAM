# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from carla_msgs/CarlaStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CarlaStatus(genpy.Message):
  _md5sum = "0a6e668a0d517dead8f5c68762fc1dab"
  _type = "carla_msgs/CarlaStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#
# Copyright (c) 2019 Intel Corporation.
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#

uint64 frame                  # frame number

float32 fixed_delta_seconds   # duration of one frame
bool synchronous_mode         # carla is in synchronous mode
bool synchronous_mode_running # true: running, false: paused"""
  __slots__ = ['frame','fixed_delta_seconds','synchronous_mode','synchronous_mode_running']
  _slot_types = ['uint64','float32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frame,fixed_delta_seconds,synchronous_mode,synchronous_mode_running

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CarlaStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.frame is None:
        self.frame = 0
      if self.fixed_delta_seconds is None:
        self.fixed_delta_seconds = 0.
      if self.synchronous_mode is None:
        self.synchronous_mode = False
      if self.synchronous_mode_running is None:
        self.synchronous_mode_running = False
    else:
      self.frame = 0
      self.fixed_delta_seconds = 0.
      self.synchronous_mode = False
      self.synchronous_mode_running = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Qf2B().pack(_x.frame, _x.fixed_delta_seconds, _x.synchronous_mode, _x.synchronous_mode_running))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.frame, _x.fixed_delta_seconds, _x.synchronous_mode, _x.synchronous_mode_running,) = _get_struct_Qf2B().unpack(str[start:end])
      self.synchronous_mode = bool(self.synchronous_mode)
      self.synchronous_mode_running = bool(self.synchronous_mode_running)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Qf2B().pack(_x.frame, _x.fixed_delta_seconds, _x.synchronous_mode, _x.synchronous_mode_running))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.frame, _x.fixed_delta_seconds, _x.synchronous_mode, _x.synchronous_mode_running,) = _get_struct_Qf2B().unpack(str[start:end])
      self.synchronous_mode = bool(self.synchronous_mode)
      self.synchronous_mode_running = bool(self.synchronous_mode_running)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Qf2B = None
def _get_struct_Qf2B():
    global _struct_Qf2B
    if _struct_Qf2B is None:
        _struct_Qf2B = struct.Struct("<Qf2B")
    return _struct_Qf2B
