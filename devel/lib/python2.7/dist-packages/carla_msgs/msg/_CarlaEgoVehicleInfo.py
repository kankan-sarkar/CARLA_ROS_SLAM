# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from carla_msgs/CarlaEgoVehicleInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import carla_msgs.msg

class CarlaEgoVehicleInfo(genpy.Message):
  _md5sum = "380b84c67059884787e0b582a7236281"
  _type = "carla_msgs/CarlaEgoVehicleInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#
# Copyright (c) 2019 Intel Corporation.
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#

uint32 id
string type
string rolename
CarlaEgoVehicleInfoWheel[] wheels
float32 max_rpm
float32 moi
float32 damping_rate_full_throttle
float32 damping_rate_zero_throttle_clutch_engaged
float32 damping_rate_zero_throttle_clutch_disengaged
bool use_gear_autobox
float32 gear_switch_time
float32 clutch_strength
float32 mass
float32 drag_coefficient
geometry_msgs/Vector3 center_of_mass

================================================================================
MSG: carla_msgs/CarlaEgoVehicleInfoWheel
#
# Copyright (c) 2019 Intel Corporation.
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#
float32 tire_friction
float32 damping_rate
float32 max_steer_angle

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['id','type','rolename','wheels','max_rpm','moi','damping_rate_full_throttle','damping_rate_zero_throttle_clutch_engaged','damping_rate_zero_throttle_clutch_disengaged','use_gear_autobox','gear_switch_time','clutch_strength','mass','drag_coefficient','center_of_mass']
  _slot_types = ['uint32','string','string','carla_msgs/CarlaEgoVehicleInfoWheel[]','float32','float32','float32','float32','float32','bool','float32','float32','float32','float32','geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,type,rolename,wheels,max_rpm,moi,damping_rate_full_throttle,damping_rate_zero_throttle_clutch_engaged,damping_rate_zero_throttle_clutch_disengaged,use_gear_autobox,gear_switch_time,clutch_strength,mass,drag_coefficient,center_of_mass

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CarlaEgoVehicleInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.type is None:
        self.type = ''
      if self.rolename is None:
        self.rolename = ''
      if self.wheels is None:
        self.wheels = []
      if self.max_rpm is None:
        self.max_rpm = 0.
      if self.moi is None:
        self.moi = 0.
      if self.damping_rate_full_throttle is None:
        self.damping_rate_full_throttle = 0.
      if self.damping_rate_zero_throttle_clutch_engaged is None:
        self.damping_rate_zero_throttle_clutch_engaged = 0.
      if self.damping_rate_zero_throttle_clutch_disengaged is None:
        self.damping_rate_zero_throttle_clutch_disengaged = 0.
      if self.use_gear_autobox is None:
        self.use_gear_autobox = False
      if self.gear_switch_time is None:
        self.gear_switch_time = 0.
      if self.clutch_strength is None:
        self.clutch_strength = 0.
      if self.mass is None:
        self.mass = 0.
      if self.drag_coefficient is None:
        self.drag_coefficient = 0.
      if self.center_of_mass is None:
        self.center_of_mass = geometry_msgs.msg.Vector3()
    else:
      self.id = 0
      self.type = ''
      self.rolename = ''
      self.wheels = []
      self.max_rpm = 0.
      self.moi = 0.
      self.damping_rate_full_throttle = 0.
      self.damping_rate_zero_throttle_clutch_engaged = 0.
      self.damping_rate_zero_throttle_clutch_disengaged = 0.
      self.use_gear_autobox = False
      self.gear_switch_time = 0.
      self.clutch_strength = 0.
      self.mass = 0.
      self.drag_coefficient = 0.
      self.center_of_mass = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_I().pack(self.id))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rolename
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.wheels)
      buff.write(_struct_I.pack(length))
      for val1 in self.wheels:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.tire_friction, _x.damping_rate, _x.max_steer_angle))
      _x = self
      buff.write(_get_struct_5fB4f3d().pack(_x.max_rpm, _x.moi, _x.damping_rate_full_throttle, _x.damping_rate_zero_throttle_clutch_engaged, _x.damping_rate_zero_throttle_clutch_disengaged, _x.use_gear_autobox, _x.gear_switch_time, _x.clutch_strength, _x.mass, _x.drag_coefficient, _x.center_of_mass.x, _x.center_of_mass.y, _x.center_of_mass.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.wheels is None:
        self.wheels = None
      if self.center_of_mass is None:
        self.center_of_mass = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rolename = str[start:end].decode('utf-8')
      else:
        self.rolename = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.wheels = []
      for i in range(0, length):
        val1 = carla_msgs.msg.CarlaEgoVehicleInfoWheel()
        _x = val1
        start = end
        end += 12
        (_x.tire_friction, _x.damping_rate, _x.max_steer_angle,) = _get_struct_3f().unpack(str[start:end])
        self.wheels.append(val1)
      _x = self
      start = end
      end += 61
      (_x.max_rpm, _x.moi, _x.damping_rate_full_throttle, _x.damping_rate_zero_throttle_clutch_engaged, _x.damping_rate_zero_throttle_clutch_disengaged, _x.use_gear_autobox, _x.gear_switch_time, _x.clutch_strength, _x.mass, _x.drag_coefficient, _x.center_of_mass.x, _x.center_of_mass.y, _x.center_of_mass.z,) = _get_struct_5fB4f3d().unpack(str[start:end])
      self.use_gear_autobox = bool(self.use_gear_autobox)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_I().pack(self.id))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rolename
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.wheels)
      buff.write(_struct_I.pack(length))
      for val1 in self.wheels:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.tire_friction, _x.damping_rate, _x.max_steer_angle))
      _x = self
      buff.write(_get_struct_5fB4f3d().pack(_x.max_rpm, _x.moi, _x.damping_rate_full_throttle, _x.damping_rate_zero_throttle_clutch_engaged, _x.damping_rate_zero_throttle_clutch_disengaged, _x.use_gear_autobox, _x.gear_switch_time, _x.clutch_strength, _x.mass, _x.drag_coefficient, _x.center_of_mass.x, _x.center_of_mass.y, _x.center_of_mass.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.wheels is None:
        self.wheels = None
      if self.center_of_mass is None:
        self.center_of_mass = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rolename = str[start:end].decode('utf-8')
      else:
        self.rolename = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.wheels = []
      for i in range(0, length):
        val1 = carla_msgs.msg.CarlaEgoVehicleInfoWheel()
        _x = val1
        start = end
        end += 12
        (_x.tire_friction, _x.damping_rate, _x.max_steer_angle,) = _get_struct_3f().unpack(str[start:end])
        self.wheels.append(val1)
      _x = self
      start = end
      end += 61
      (_x.max_rpm, _x.moi, _x.damping_rate_full_throttle, _x.damping_rate_zero_throttle_clutch_engaged, _x.damping_rate_zero_throttle_clutch_disengaged, _x.use_gear_autobox, _x.gear_switch_time, _x.clutch_strength, _x.mass, _x.drag_coefficient, _x.center_of_mass.x, _x.center_of_mass.y, _x.center_of_mass.z,) = _get_struct_5fB4f3d().unpack(str[start:end])
      self.use_gear_autobox = bool(self.use_gear_autobox)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_5fB4f3d = None
def _get_struct_5fB4f3d():
    global _struct_5fB4f3d
    if _struct_5fB4f3d is None:
        _struct_5fB4f3d = struct.Struct("<5fB4f3d")
    return _struct_5fB4f3d
